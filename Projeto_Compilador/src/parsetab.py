
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND APOSTROPHE ARRAY ASSIGN BEGIN BOOLEAN CASE CHAR_TYPE COLON COMMA COMMENT CONST DIV DIVIDE DO DOWNTO ELSE END EQ FALSE FILE FOR FUNCTION GE GOTO GT HALT ID IF IN INTEGER INTEGER_TYPE LABEL LBRACKET LE LPAREN LT MINUS MOD NEQ NIL NOT OF OR PACKED PERIOD PLUS PROCEDURE PROGRAM RBRACKET READ READLN REAL REAL_TYPE RECORD REPEAT RPAREN SEMICOLON SET STRING STRING_TYPE THEN TIMES TO TRUE TYPE UNTIL VAR WHILE WITH WRITE WRITELNprogram : PROGRAM ID SEMICOLON block PERIODblock : declarations compound_statementdeclarations : VAR var_declarations\n                        | function_declaration\n                        | emptyfunction_block : VAR var_declarations compound_statement\n                        | compound_statementdeclaration : VAR var_declarations\n                    | function_declarationvar_declarations : var_declarations var_declaration\n                           | var_declarationvar_declaration : id_list COLON type_spec SEMICOLONid_list : id_list COMMA ID\n                  | IDtype_spec : INTEGER_TYPE\n                     | REAL_TYPE\n                     | BOOLEAN\n                     | STRING_TYPE\n                     | CHAR_TYPE\n                     | array_typearray_type : ARRAY LBRACKET INTEGER PERIOD PERIOD INTEGER RBRACKET OF type_speccompound_statement : BEGIN statement_list ENDstatement_list : statement_list SEMICOLON statement\n                         | statementstatement : compound_statement\n                     | assignment_statement\n                     | if_statement\n                     | while_statement\n                     | for_statement\n                     | procedure_call_statement\n                     | halt_statement\n                     | emptyassignment_statement : variable ASSIGN expressionvariable : ID\n                | ID LBRACKET expression RBRACKETif_statement : IF expression THEN statement\n                        | IF expression THEN statement ELSE statementwhile_statement : WHILE expression DO statementfor_statement : FOR ID ASSIGN expression TO expression DO statement\n                        | FOR ID ASSIGN expression DOWNTO expression DO statementprocedure_call_statement : ID LPAREN expression_list RPAREN\n                                | ID LPAREN RPAREN\n                                | WRITELN LPAREN expression_list RPAREN\n                                | WRITELN LPAREN RPAREN\n                                | WRITE LPAREN expression_list RPAREN\n                                | WRITE LPAREN RPAREN\n                                | READLN LPAREN variable RPAREN\n                                | READLN LPAREN RPARENexpression_list : expression_list COMMA expression\n                       | expressionexpression : simple_expression\n                     | simple_expression relop simple_expressionrelop : EQ\n                | NEQ\n                | LT\n                | LE\n                | GT\n                | GE\n                | INsimple_expression : term\n                            | simple_expression addop termaddop : PLUS\n                | MINUS\n                | ORterm : factor\n                | term mulop factormulop : TIMES\n                | DIVIDE\n                | DIV\n                | MOD\n                | ANDfactor : variable\n                 | INTEGER\n                 | REAL\n                 | STRING\n                 | TRUE\n                 | FALSE\n                 | LPAREN expression RPAREN\n                 | NOT factor\n                 | function_callexpression : variable COLON INTEGER\n                    | variable COLON INTEGER COLON INTEGERfunction_call : ID LPAREN expression_list RPAREN\n                        | ID LPAREN RPARENfunction_declaration : FUNCTION ID LPAREN param_list RPAREN COLON type_spec SEMICOLON function_block SEMICOLONparam_list : param_list SEMICOLON param\n                    | paramparam : id_list COLON type_spechalt_statement : HALT SEMICOLONempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,11,],[0,-1,]),'ID':([2,7,10,13,14,15,30,31,32,38,40,41,43,44,56,57,61,62,63,64,65,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,105,106,118,121,134,143,146,147,157,158,161,167,],[3,17,18,33,17,-11,50,50,60,-10,75,17,33,50,50,50,50,50,50,50,117,33,50,50,-53,-54,-55,-56,-57,-58,-59,-62,-63,-64,50,-67,-68,-69,-70,-71,50,33,50,-12,17,50,33,50,50,33,33,17,17,]),'SEMICOLON':([3,13,19,20,21,22,23,24,25,26,27,28,37,42,43,46,47,48,49,50,51,52,53,54,55,58,66,67,68,69,70,71,72,73,76,77,79,80,81,103,104,105,108,112,114,116,123,124,125,126,127,129,130,131,133,135,136,137,138,141,142,143,145,150,151,152,157,158,160,162,163,164,169,170,],[4,-90,43,-24,-25,-26,-27,-28,-29,-30,-31,-32,66,-22,-90,-51,-72,-73,-60,-34,-65,-74,-75,-76,-77,-80,-89,118,-15,-16,-17,-18,-19,-20,121,-87,-23,-33,-90,-79,-72,-90,-42,-44,-46,-48,-36,-52,-61,-81,-66,-84,-78,-38,-41,-35,-43,-45,-47,-86,-88,-90,-83,156,-37,-82,-90,-90,166,-7,-39,-40,-6,-21,]),'VAR':([4,156,],[7,161,]),'FUNCTION':([4,],[10,]),'BEGIN':([4,6,8,9,13,14,15,38,43,81,105,118,143,156,157,158,166,167,],[-90,13,-4,-5,13,-3,-11,-10,13,13,13,-12,13,13,13,13,-85,13,]),'PERIOD':([5,12,42,139,149,],[11,-2,-22,149,155,]),'IF':([13,43,81,105,143,157,158,],[30,30,30,30,30,30,30,]),'WHILE':([13,43,81,105,143,157,158,],[31,31,31,31,31,31,31,]),'FOR':([13,43,81,105,143,157,158,],[32,32,32,32,32,32,32,]),'WRITELN':([13,43,81,105,143,157,158,],[34,34,34,34,34,34,34,]),'WRITE':([13,43,81,105,143,157,158,],[35,35,35,35,35,35,35,]),'READLN':([13,43,81,105,143,157,158,],[36,36,36,36,36,36,36,]),'HALT':([13,43,81,105,143,157,158,],[37,37,37,37,37,37,37,]),'END':([13,19,20,21,22,23,24,25,26,27,28,42,43,46,47,48,49,50,51,52,53,54,55,58,66,79,80,81,103,104,105,108,112,114,116,123,124,125,126,127,129,130,131,133,135,136,137,138,143,145,151,152,157,158,163,164,],[-90,42,-24,-25,-26,-27,-28,-29,-30,-31,-32,-22,-90,-51,-72,-73,-60,-34,-65,-74,-75,-76,-77,-80,-89,-23,-33,-90,-79,-72,-90,-42,-44,-46,-48,-36,-52,-61,-81,-66,-84,-78,-38,-41,-35,-43,-45,-47,-90,-83,-37,-82,-90,-90,-39,-40,]),'COLON':([16,17,47,50,75,78,120,126,135,],[39,-14,94,-34,-13,122,140,144,-35,]),'COMMA':([16,17,46,47,48,49,50,51,52,53,54,55,58,75,78,103,104,107,109,111,113,124,125,126,127,128,129,130,135,145,148,152,],[40,-14,-51,-72,-73,-60,-34,-65,-74,-75,-76,-77,-80,-13,40,-79,-72,134,-50,134,134,-52,-61,-81,-66,134,-84,-78,-35,-83,-49,-82,]),'LPAREN':([18,30,31,33,34,35,36,44,50,56,57,61,62,63,64,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,106,134,146,147,],[41,56,56,61,63,64,65,56,101,56,56,56,56,56,56,56,56,-53,-54,-55,-56,-57,-58,-59,-62,-63,-64,56,-67,-68,-69,-70,-71,56,56,56,56,56,]),'ELSE':([21,22,23,24,25,26,27,28,42,46,47,48,49,50,51,52,53,54,55,58,66,80,81,103,104,105,108,112,114,116,123,124,125,126,127,129,130,131,133,135,136,137,138,143,145,151,152,157,158,163,164,],[-25,-26,-27,-28,-29,-30,-31,-32,-22,-51,-72,-73,-60,-34,-65,-74,-75,-76,-77,-80,-89,-33,-90,-79,-72,-90,-42,-44,-46,-48,143,-52,-61,-81,-66,-84,-78,-38,-41,-35,-43,-45,-47,-90,-83,-37,-82,-90,-90,-39,-40,]),'ASSIGN':([29,33,60,135,],[44,-34,106,-35,]),'INTEGER':([30,31,44,56,57,61,62,63,64,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,106,119,134,144,146,147,155,],[48,48,48,48,48,48,48,48,48,48,48,-53,-54,-55,-56,-57,-58,-59,-62,-63,-64,126,48,-67,-68,-69,-70,-71,48,48,139,48,152,48,48,159,]),'REAL':([30,31,44,56,57,61,62,63,64,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,106,134,146,147,],[52,52,52,52,52,52,52,52,52,52,52,-53,-54,-55,-56,-57,-58,-59,-62,-63,-64,52,-67,-68,-69,-70,-71,52,52,52,52,52,]),'STRING':([30,31,44,56,57,61,62,63,64,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,106,134,146,147,],[53,53,53,53,53,53,53,53,53,53,53,-53,-54,-55,-56,-57,-58,-59,-62,-63,-64,53,-67,-68,-69,-70,-71,53,53,53,53,53,]),'TRUE':([30,31,44,56,57,61,62,63,64,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,106,134,146,147,],[54,54,54,54,54,54,54,54,54,54,54,-53,-54,-55,-56,-57,-58,-59,-62,-63,-64,54,-67,-68,-69,-70,-71,54,54,54,54,54,]),'FALSE':([30,31,44,56,57,61,62,63,64,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,106,134,146,147,],[55,55,55,55,55,55,55,55,55,55,55,-53,-54,-55,-56,-57,-58,-59,-62,-63,-64,55,-67,-68,-69,-70,-71,55,55,55,55,55,]),'NOT':([30,31,44,56,57,61,62,63,64,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,106,134,146,147,],[57,57,57,57,57,57,57,57,57,57,57,-53,-54,-55,-56,-57,-58,-59,-62,-63,-64,57,-67,-68,-69,-70,-71,57,57,57,57,57,]),'LBRACKET':([33,50,74,117,],[62,62,119,62,]),'INTEGER_TYPE':([39,122,140,168,],[68,68,68,68,]),'REAL_TYPE':([39,122,140,168,],[69,69,69,69,]),'BOOLEAN':([39,122,140,168,],[70,70,70,70,]),'STRING_TYPE':([39,122,140,168,],[71,71,71,71,]),'CHAR_TYPE':([39,122,140,168,],[72,72,72,72,]),'ARRAY':([39,122,140,168,],[74,74,74,74,]),'THEN':([45,46,47,48,49,50,51,52,53,54,55,58,103,104,124,125,126,127,129,130,135,145,152,],[81,-51,-72,-73,-60,-34,-65,-74,-75,-76,-77,-80,-79,-72,-52,-61,-81,-66,-84,-78,-35,-83,-82,]),'DO':([46,47,48,49,50,51,52,53,54,55,58,59,103,104,124,125,126,127,129,130,135,145,152,153,154,],[-51,-72,-73,-60,-34,-65,-74,-75,-76,-77,-80,105,-79,-72,-52,-61,-81,-66,-84,-78,-35,-83,-82,157,158,]),'RPAREN':([46,47,48,49,50,51,52,53,54,55,58,61,63,64,65,68,69,70,71,72,73,76,77,101,102,103,104,107,109,111,113,115,117,124,125,126,127,128,129,130,135,141,142,145,148,152,170,],[-51,-72,-73,-60,-34,-65,-74,-75,-76,-77,-80,108,112,114,116,-15,-16,-17,-18,-19,-20,120,-87,129,130,-79,-72,133,-50,136,137,138,-34,-52,-61,-81,-66,145,-84,-78,-35,-86,-88,-83,-49,-82,-21,]),'RBRACKET':([46,47,48,49,50,51,52,53,54,55,58,103,104,110,124,125,126,127,129,130,135,145,152,159,],[-51,-72,-73,-60,-34,-65,-74,-75,-76,-77,-80,-79,-72,135,-52,-61,-81,-66,-84,-78,-35,-83,-82,165,]),'TO':([46,47,48,49,50,51,52,53,54,55,58,103,104,124,125,126,127,129,130,132,135,145,152,],[-51,-72,-73,-60,-34,-65,-74,-75,-76,-77,-80,-79,-72,-52,-61,-81,-66,-84,-78,146,-35,-83,-82,]),'DOWNTO':([46,47,48,49,50,51,52,53,54,55,58,103,104,124,125,126,127,129,130,132,135,145,152,],[-51,-72,-73,-60,-34,-65,-74,-75,-76,-77,-80,-79,-72,-52,-61,-81,-66,-84,-78,147,-35,-83,-82,]),'EQ':([46,47,48,49,50,51,52,53,54,55,58,103,104,125,127,129,130,135,145,],[84,-72,-73,-60,-34,-65,-74,-75,-76,-77,-80,-79,-72,-61,-66,-84,-78,-35,-83,]),'NEQ':([46,47,48,49,50,51,52,53,54,55,58,103,104,125,127,129,130,135,145,],[85,-72,-73,-60,-34,-65,-74,-75,-76,-77,-80,-79,-72,-61,-66,-84,-78,-35,-83,]),'LT':([46,47,48,49,50,51,52,53,54,55,58,103,104,125,127,129,130,135,145,],[86,-72,-73,-60,-34,-65,-74,-75,-76,-77,-80,-79,-72,-61,-66,-84,-78,-35,-83,]),'LE':([46,47,48,49,50,51,52,53,54,55,58,103,104,125,127,129,130,135,145,],[87,-72,-73,-60,-34,-65,-74,-75,-76,-77,-80,-79,-72,-61,-66,-84,-78,-35,-83,]),'GT':([46,47,48,49,50,51,52,53,54,55,58,103,104,125,127,129,130,135,145,],[88,-72,-73,-60,-34,-65,-74,-75,-76,-77,-80,-79,-72,-61,-66,-84,-78,-35,-83,]),'GE':([46,47,48,49,50,51,52,53,54,55,58,103,104,125,127,129,130,135,145,],[89,-72,-73,-60,-34,-65,-74,-75,-76,-77,-80,-79,-72,-61,-66,-84,-78,-35,-83,]),'IN':([46,47,48,49,50,51,52,53,54,55,58,103,104,125,127,129,130,135,145,],[90,-72,-73,-60,-34,-65,-74,-75,-76,-77,-80,-79,-72,-61,-66,-84,-78,-35,-83,]),'PLUS':([46,47,48,49,50,51,52,53,54,55,58,103,104,124,125,127,129,130,135,145,],[91,-72,-73,-60,-34,-65,-74,-75,-76,-77,-80,-79,-72,91,-61,-66,-84,-78,-35,-83,]),'MINUS':([46,47,48,49,50,51,52,53,54,55,58,103,104,124,125,127,129,130,135,145,],[92,-72,-73,-60,-34,-65,-74,-75,-76,-77,-80,-79,-72,92,-61,-66,-84,-78,-35,-83,]),'OR':([46,47,48,49,50,51,52,53,54,55,58,103,104,124,125,127,129,130,135,145,],[93,-72,-73,-60,-34,-65,-74,-75,-76,-77,-80,-79,-72,93,-61,-66,-84,-78,-35,-83,]),'TIMES':([47,48,49,50,51,52,53,54,55,58,103,104,125,127,129,130,135,145,],[-72,-73,96,-34,-65,-74,-75,-76,-77,-80,-79,-72,96,-66,-84,-78,-35,-83,]),'DIVIDE':([47,48,49,50,51,52,53,54,55,58,103,104,125,127,129,130,135,145,],[-72,-73,97,-34,-65,-74,-75,-76,-77,-80,-79,-72,97,-66,-84,-78,-35,-83,]),'DIV':([47,48,49,50,51,52,53,54,55,58,103,104,125,127,129,130,135,145,],[-72,-73,98,-34,-65,-74,-75,-76,-77,-80,-79,-72,98,-66,-84,-78,-35,-83,]),'MOD':([47,48,49,50,51,52,53,54,55,58,103,104,125,127,129,130,135,145,],[-72,-73,99,-34,-65,-74,-75,-76,-77,-80,-79,-72,99,-66,-84,-78,-35,-83,]),'AND':([47,48,49,50,51,52,53,54,55,58,103,104,125,127,129,130,135,145,],[-72,-73,100,-34,-65,-74,-75,-76,-77,-80,-79,-72,100,-66,-84,-78,-35,-83,]),'OF':([165,],[168,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([4,],[5,]),'declarations':([4,],[6,]),'function_declaration':([4,],[8,]),'empty':([4,13,43,81,105,143,157,158,],[9,28,28,28,28,28,28,28,]),'compound_statement':([6,13,43,81,105,143,156,157,158,167,],[12,21,21,21,21,21,162,21,21,169,]),'var_declarations':([7,161,],[14,167,]),'var_declaration':([7,14,161,167,],[15,38,15,38,]),'id_list':([7,14,41,121,161,167,],[16,16,78,78,16,16,]),'statement_list':([13,],[19,]),'statement':([13,43,81,105,143,157,158,],[20,79,123,131,151,163,164,]),'assignment_statement':([13,43,81,105,143,157,158,],[22,22,22,22,22,22,22,]),'if_statement':([13,43,81,105,143,157,158,],[23,23,23,23,23,23,23,]),'while_statement':([13,43,81,105,143,157,158,],[24,24,24,24,24,24,24,]),'for_statement':([13,43,81,105,143,157,158,],[25,25,25,25,25,25,25,]),'procedure_call_statement':([13,43,81,105,143,157,158,],[26,26,26,26,26,26,26,]),'halt_statement':([13,43,81,105,143,157,158,],[27,27,27,27,27,27,27,]),'variable':([13,30,31,43,44,56,57,61,62,63,64,65,81,82,83,95,101,105,106,134,143,146,147,157,158,],[29,47,47,29,47,47,104,47,47,47,47,115,29,104,104,104,47,29,47,47,29,47,47,29,29,]),'expression':([30,31,44,56,61,62,63,64,101,106,134,146,147,],[45,59,80,102,109,110,109,109,109,132,148,153,154,]),'simple_expression':([30,31,44,56,61,62,63,64,82,101,106,134,146,147,],[46,46,46,46,46,46,46,46,124,46,46,46,46,46,]),'term':([30,31,44,56,61,62,63,64,82,83,101,106,134,146,147,],[49,49,49,49,49,49,49,49,49,125,49,49,49,49,49,]),'factor':([30,31,44,56,57,61,62,63,64,82,83,95,101,106,134,146,147,],[51,51,51,51,103,51,51,51,51,51,51,127,51,51,51,51,51,]),'function_call':([30,31,44,56,57,61,62,63,64,82,83,95,101,106,134,146,147,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'type_spec':([39,122,140,168,],[67,142,150,170,]),'array_type':([39,122,140,168,],[73,73,73,73,]),'param_list':([41,],[76,]),'param':([41,121,],[77,141,]),'relop':([46,],[82,]),'addop':([46,124,],[83,83,]),'mulop':([49,125,],[95,95,]),'expression_list':([61,63,64,101,],[107,111,113,128,]),'function_block':([156,],[160,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON block PERIOD','program',5,'p_program','analise_sintatica.py',31),
  ('block -> declarations compound_statement','block',2,'p_block','analise_sintatica.py',36),
  ('declarations -> VAR var_declarations','declarations',2,'p_declarations','analise_sintatica.py',40),
  ('declarations -> function_declaration','declarations',1,'p_declarations','analise_sintatica.py',41),
  ('declarations -> empty','declarations',1,'p_declarations','analise_sintatica.py',42),
  ('function_block -> VAR var_declarations compound_statement','function_block',3,'p_function_block','analise_sintatica.py',51),
  ('function_block -> compound_statement','function_block',1,'p_function_block','analise_sintatica.py',52),
  ('declaration -> VAR var_declarations','declaration',2,'p_declaration','analise_sintatica.py',62),
  ('declaration -> function_declaration','declaration',1,'p_declaration','analise_sintatica.py',63),
  ('var_declarations -> var_declarations var_declaration','var_declarations',2,'p_var_declarations','analise_sintatica.py',68),
  ('var_declarations -> var_declaration','var_declarations',1,'p_var_declarations','analise_sintatica.py',69),
  ('var_declaration -> id_list COLON type_spec SEMICOLON','var_declaration',4,'p_var_declaration','analise_sintatica.py',78),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','analise_sintatica.py',88),
  ('id_list -> ID','id_list',1,'p_id_list','analise_sintatica.py',89),
  ('type_spec -> INTEGER_TYPE','type_spec',1,'p_type_spec','analise_sintatica.py',98),
  ('type_spec -> REAL_TYPE','type_spec',1,'p_type_spec','analise_sintatica.py',99),
  ('type_spec -> BOOLEAN','type_spec',1,'p_type_spec','analise_sintatica.py',100),
  ('type_spec -> STRING_TYPE','type_spec',1,'p_type_spec','analise_sintatica.py',101),
  ('type_spec -> CHAR_TYPE','type_spec',1,'p_type_spec','analise_sintatica.py',102),
  ('type_spec -> array_type','type_spec',1,'p_type_spec','analise_sintatica.py',103),
  ('array_type -> ARRAY LBRACKET INTEGER PERIOD PERIOD INTEGER RBRACKET OF type_spec','array_type',9,'p_array_type','analise_sintatica.py',112),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','analise_sintatica.py',117),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','analise_sintatica.py',122),
  ('statement_list -> statement','statement_list',1,'p_statement_list','analise_sintatica.py',123),
  ('statement -> compound_statement','statement',1,'p_statement','analise_sintatica.py',136),
  ('statement -> assignment_statement','statement',1,'p_statement','analise_sintatica.py',137),
  ('statement -> if_statement','statement',1,'p_statement','analise_sintatica.py',138),
  ('statement -> while_statement','statement',1,'p_statement','analise_sintatica.py',139),
  ('statement -> for_statement','statement',1,'p_statement','analise_sintatica.py',140),
  ('statement -> procedure_call_statement','statement',1,'p_statement','analise_sintatica.py',141),
  ('statement -> halt_statement','statement',1,'p_statement','analise_sintatica.py',142),
  ('statement -> empty','statement',1,'p_statement','analise_sintatica.py',143),
  ('assignment_statement -> variable ASSIGN expression','assignment_statement',3,'p_assignment_statement','analise_sintatica.py',148),
  ('variable -> ID','variable',1,'p_variable','analise_sintatica.py',152),
  ('variable -> ID LBRACKET expression RBRACKET','variable',4,'p_variable','analise_sintatica.py',153),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','analise_sintatica.py',162),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','analise_sintatica.py',163),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','analise_sintatica.py',172),
  ('for_statement -> FOR ID ASSIGN expression TO expression DO statement','for_statement',8,'p_for_statement','analise_sintatica.py',177),
  ('for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','analise_sintatica.py',178),
  ('procedure_call_statement -> ID LPAREN expression_list RPAREN','procedure_call_statement',4,'p_procedure_call_statement','analise_sintatica.py',207),
  ('procedure_call_statement -> ID LPAREN RPAREN','procedure_call_statement',3,'p_procedure_call_statement','analise_sintatica.py',208),
  ('procedure_call_statement -> WRITELN LPAREN expression_list RPAREN','procedure_call_statement',4,'p_procedure_call_statement','analise_sintatica.py',209),
  ('procedure_call_statement -> WRITELN LPAREN RPAREN','procedure_call_statement',3,'p_procedure_call_statement','analise_sintatica.py',210),
  ('procedure_call_statement -> WRITE LPAREN expression_list RPAREN','procedure_call_statement',4,'p_procedure_call_statement','analise_sintatica.py',211),
  ('procedure_call_statement -> WRITE LPAREN RPAREN','procedure_call_statement',3,'p_procedure_call_statement','analise_sintatica.py',212),
  ('procedure_call_statement -> READLN LPAREN variable RPAREN','procedure_call_statement',4,'p_procedure_call_statement','analise_sintatica.py',213),
  ('procedure_call_statement -> READLN LPAREN RPAREN','procedure_call_statement',3,'p_procedure_call_statement','analise_sintatica.py',214),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','analise_sintatica.py',233),
  ('expression_list -> expression','expression_list',1,'p_expression_list','analise_sintatica.py',234),
  ('expression -> simple_expression','expression',1,'p_expression','analise_sintatica.py',244),
  ('expression -> simple_expression relop simple_expression','expression',3,'p_expression','analise_sintatica.py',245),
  ('relop -> EQ','relop',1,'p_relop','analise_sintatica.py',253),
  ('relop -> NEQ','relop',1,'p_relop','analise_sintatica.py',254),
  ('relop -> LT','relop',1,'p_relop','analise_sintatica.py',255),
  ('relop -> LE','relop',1,'p_relop','analise_sintatica.py',256),
  ('relop -> GT','relop',1,'p_relop','analise_sintatica.py',257),
  ('relop -> GE','relop',1,'p_relop','analise_sintatica.py',258),
  ('relop -> IN','relop',1,'p_relop','analise_sintatica.py',259),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','analise_sintatica.py',264),
  ('simple_expression -> simple_expression addop term','simple_expression',3,'p_simple_expression','analise_sintatica.py',265),
  ('addop -> PLUS','addop',1,'p_addop','analise_sintatica.py',273),
  ('addop -> MINUS','addop',1,'p_addop','analise_sintatica.py',274),
  ('addop -> OR','addop',1,'p_addop','analise_sintatica.py',275),
  ('term -> factor','term',1,'p_term','analise_sintatica.py',280),
  ('term -> term mulop factor','term',3,'p_term','analise_sintatica.py',281),
  ('mulop -> TIMES','mulop',1,'p_mulop','analise_sintatica.py',289),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','analise_sintatica.py',290),
  ('mulop -> DIV','mulop',1,'p_mulop','analise_sintatica.py',291),
  ('mulop -> MOD','mulop',1,'p_mulop','analise_sintatica.py',292),
  ('mulop -> AND','mulop',1,'p_mulop','analise_sintatica.py',293),
  ('factor -> variable','factor',1,'p_factor','analise_sintatica.py',298),
  ('factor -> INTEGER','factor',1,'p_factor','analise_sintatica.py',299),
  ('factor -> REAL','factor',1,'p_factor','analise_sintatica.py',300),
  ('factor -> STRING','factor',1,'p_factor','analise_sintatica.py',301),
  ('factor -> TRUE','factor',1,'p_factor','analise_sintatica.py',302),
  ('factor -> FALSE','factor',1,'p_factor','analise_sintatica.py',303),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','analise_sintatica.py',304),
  ('factor -> NOT factor','factor',2,'p_factor','analise_sintatica.py',305),
  ('factor -> function_call','factor',1,'p_factor','analise_sintatica.py',306),
  ('expression -> variable COLON INTEGER','expression',3,'p_formatted_expression','analise_sintatica.py',324),
  ('expression -> variable COLON INTEGER COLON INTEGER','expression',5,'p_formatted_expression','analise_sintatica.py',325),
  ('function_call -> ID LPAREN expression_list RPAREN','function_call',4,'p_function_call','analise_sintatica.py',334),
  ('function_call -> ID LPAREN RPAREN','function_call',3,'p_function_call','analise_sintatica.py',335),
  ('function_declaration -> FUNCTION ID LPAREN param_list RPAREN COLON type_spec SEMICOLON function_block SEMICOLON','function_declaration',10,'p_function_declaration','analise_sintatica.py',343),
  ('param_list -> param_list SEMICOLON param','param_list',3,'p_param_list','analise_sintatica.py',348),
  ('param_list -> param','param_list',1,'p_param_list','analise_sintatica.py',349),
  ('param -> id_list COLON type_spec','param',3,'p_param','analise_sintatica.py',357),
  ('halt_statement -> HALT SEMICOLON','halt_statement',2,'p_halt_statement','analise_sintatica.py',363),
  ('empty -> <empty>','empty',0,'p_empty','analise_sintatica.py',369),
]
